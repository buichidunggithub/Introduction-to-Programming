 BÀI TẬP THỰC HÀNH TUẦN 11
ÔN TẬP


Họ và tên: Bùi Chí Dũng

MSSV: 1712364

Lớp: 17CTT3A

Ca thực hành: Chiều thứ 2, 14g45 PMT_NDT 4.1
		ĐỀ:
Bài tập tuần 11 (ôn tập) 
		Mảng 1 chiều 
1. Viết các hàm sau: 
a. Thêm 1 phần tử x vào mảng tại vị trí k 
b. Viết hàm nhập mảng sao cho khi nhập xong thì giá trị trong mảng sắp xếp giảm dần 
c. Thêm x vào trong mảng tăng nhưng vẫn giữ nguyên tính tăng của mảng.  
2. Viết các hàm sau: 
a. Đảo ngược mảng ban đầu 
b. Đảo ngược thứ tự các số chẵn trong mảng 
c. Cho biết mảng a có phải là mảng con của mảng b không. 
d. Tìm mảng con có tổng lớn nhất (với mảng có số dương và âm). 
		Mảng 2 chiều 
3. Viết các hàm sau: 
a. Tính tổng các giá trị nằm trên biên của ma trận 
b. Đếm các phần tử cực trị trong ma trận các số thực. Một phần tử cực trị khi nó lớn hơn các phần tử xung quanh hoặc nhỏ hơn các phần tử xung quanh. 
c. Kiểm tra các giá trị trong ma trận có giảm dần theo dòng và cột hay không. 
d. Tìm giá trị lớn nhất của ma trận 
e. Tìm giá trị lớn thứ 2 của ma trận.  
		Chuỗi ký tự 
4. Viết các hàm sau 
a. Đổi tất cả các ký tự trong chuỗi thành chữ thường (không dùng hàm thư viện) 
b. Chuẩn hoá một chuỗi nhập từ bàn phím. Tức loại bỏ hết khoảng trắng thừa ở đầu, cuối và giữa. ví dụ nhập chuỗi: “   Nguyễn    Mậu      Tùng” : Chuẩn hoá thành “Nguyễn Mậu Tùng” 
c. Nhập xâu ký tự từ bàn phím, in ra từ dài nhất trong xâu (từ là dãy ký tự không chứa khoảng trắng).  
d. Viết hàm kiểm tra xem trong chuỗi có ký tự số hay không nếu có tách ra thành mảng số riêng. 
		Kiểu dữ liệu có cấu trúc 
5. Hãy khai báo kiểu dữ liệu để biểu diễn thông tin của một sổ tiết kiệm (SOTIETKIEM). Biết rằng một sổ tiết kiệm gồm những thành phần sau: 
- Mã sổ: chuỗi tối đa 5 ký tự 							char MaSo[max][5]
- Loại tiết kiệm: chuỗi tối đa 10 ký tự 				char Loai[max][10]
- Họ tên khách hàng: chuỗi tối đa 30 ký tự 				char HoTen[max][30]
- Chứng minh nhân dân: kiểu số nguyên 4 byte 			int CMND
- Ngày mở sổ: kiểu dữ liệu ngày 						...
- Số tiền gửi: kiểu số thực Sau đó viết hàm nhập, xuất cho kiểu dữ liệu này ...

Bài 1:
a)Thêm phần tử x vào mảng tại vị trí k
void them(int a[],int n,int k)
{
 int x;
 printf("nhap phan tu can them:");
 scanf("%d",&x);
 for(int i=n;i>=k;i--)
 {
 a[i]=a[i-1];
 }
 a[k]=x;
 n++;
 xuatmang(a,n);
 b)Viết hàm nhập mảng sao cho khi nhập xong thì giá trị trong mảng sắp xếp giảm dầ
 
void nhap(int a[], int &n)
 {
	do
	{
		printf("\nnhap so phan tu: ");
		scanf("%d", &n);
		if(n<=0 || n>MAX)
		{
			printf("\n so phan tu khong hop le, hay nhap lai.");
		}
	} while (n<=0 || n>MAX);
		int i, j, k;
		for(i=0; i<n; i++)
	{
		printf("\nnhap a[%d]:", i);
		scanf("%d", &a[i]);
		for (j=0; j<i; j++)
		{
			if(a[i]>a[j]
			{
				int temp=a[i];
				for(k=i; k>j; k--)
				{
					a[k]=a[k-1];
				}
				a[j]=temp;
				break;
			}
	}
 }
 c)Thêm x vào trong mảng tăng nhưng vẫn giữ nguyên tính tăng của mảng
 void ThemPTVaoMangTang(int a[], int &n, int x)
 {
	int i, j;
	for(i=0; i<n; i++)
	{
		if(x<a[i])
		{
			int temp=x;
			for(j=n; j>i; i--)
			{
			a[j]=a[j-1];
			}
			a[i]=temp;
			break;
		}
	}
	n++;
 }
 Bài 2:
a)Đảo ngược mảng ban đầu 
void DaoNguocMang(int a[],int n)   //n la so phan tu cua mang
{
 for(int i=0;i<n/2;i++)
 {
   t=a[i];
   a[i]=a[n-1-i];
   a[n-1-i]=t; 
 }

b) Đảo ngược thứ tự các số chẵn trong mảng 
void DNTTSC(int a[],int n)
{
    int cnt = 0; // bien luu tru vi tri swap
    for(int i=0;i<=n/2;i++)
        for (int j=n-cnt-1;j>(n/2);j--)  
		{ 
           
            if(a[i]%2==0&&a[j]%2==0) 
			{
                Swap(a[i],a[j]);
                ++cnt;
                break; 
            }
        }
}

c) Cho biết mảng a có phải là mảng con của mảng b không.
int KiemTraCon(int a[], int b[], int x, int y)
{
	int i,j, check=0;
	for(i=0; i<x; i++)
	{
		if(b[i] == a[0])
		{
			int s=i;
			check=1;
			for(j=0; i<y; j++)
			{
				if(a[j] != b[s++])
				{
					check =0;
					break;
				}
			}
			if(check==1)
			{
			return check;
			}
		}
	}
	return check;
}
 
d) Tìm mảng con có tổng lớn nhất (với mảng có số dương và âm). 
void SumMax(int a[],int n)
{
   int dau=0,cuoi=0,temp=0,sum=0;
   int max=-10000;
   for(int i=0;i<n;i++)
   {
      sum+=a[i];
         if(sum>max)
            {
               max=sum;
               dau=temp;
               cuoi=i;
            }
         if(sum<0)
            {
               temp=i+1;
               sum=0;
            }
   }
   
}

Bài 3:
a) Tính tổng các giá trị nằm trên biên của ma trận
long tongBien(int a[][MAX], int m, int n)
{
	long s=0;
	for(int j=0; j<cot; j++)
	{
		s+=a[0][j];
		s+=a[m-1][j];
	}
	for(int i=0; i<dong-1; i++)
	{
		s+=a[i][0];
		s+=a[i][n-1];
	}
	return s;
}
 
b) Đếm các phần tử cực trị trong ma trận các số thực. Một phần tử cực trị khi nó lớn hơn các phần tử xung quanh hoặc nhỏ hơn các phần tử xung quanh. 

bool KiemTraCucTri(float a[MAX], int dong, int cot, int sodong, int socot)
{
	bool CucDai=true, CucTieu=true;
	for(int i=-1; i<=1; i++)
	{
		for(int j=-1; j<=1; j++)
		{
			if(dong + i >= 0 && cot + j >= 0 && dong + i < sodong && cot + j < socot && !(i == 0 && j == 0))
			{
				if(a[dong][cot] <=a[dong+i][cot+j])
				{
					CucDai = false;
				}
				if (a[dong][cot] >= a[dong+i][cot+j])
				(
					CucTieu = false;
				)
				if(!CucDai && !CucTieu)
				break;
			}
		}
	}
	if(!CucDai && !CucTieu) 
	return false;
	return true;
}

int DemPTCucTri(float a[][MAX], int dong, int cot)
{
	int dem=0;
	for(int i=0; i<dong; i++)
	{
		for(int j=0; j<cot; j++)
		{
			if(KiemTraCucTri(a, dong, cot, i, j))
			{
				dem++;
			}
		}
	}
	return dem;
}

c) Kiểm tra các giá trị trong ma trận có giảm dần theo dòng và cột hay không.
int KiemTraGiamDanDong(int a[][MAX], int x, int cot)
{
	int flag = 1;
	for(int j=0; j<cot-1;j++)
	{
		for(int k=j+1; k<cot; k++)
		{
			if(a[x][j] < a[x][k])
			{
				flag = 0;
				break;
			}
		}
	}
	return flag;
}
int KiemTraGiamDanCot(int a[][MAX], int y, int dong)
{
	int flag = 1;
	for(int i=0; i<dong-1; i++)
	{
		for(int j=i+1; j<dong; j++)
		{
			if(a[i][y]<a[j][y])
			{
				flag = 0;
				break;
			}
		}
	}
	return flag;
}
int KiemTraGiamDanDongVaCot(int a[][MAX], int dong, int cot)
{
	int flag = 1;
	for(int i=0; i<dong; i++)
	{
		for(int j=0; j< cot; j++)
		{
		if(KiemTraGiamDanDong(a, i, cot)==0 || KiemTraGiamDanCot(a, j, dong)==0)
			{
				flag = 0;
				break;
			}
		}
	}
	return flag;	
} 

d) Tìm giá trị lớn nhất của ma trận 
void timMax(int a[][MAX],int dong, int cot)
{
      int i,j,u=0,v=0,max=a[0][0];
      for (i=0;i<dong;i++)
    {
       for (j=0;j<cot;j++)
       if (a[i][j]>max)
       {
              max=a[i][j];
              u=i;
              v=j;
       }
   }
   printf("\nVi tri phan tu Max: [%d][%d]",u,v);
}

e) Tìm giá trị lớn thứ 2 của ma trận
int max2(int a[][MAX],int dong, int cot)
{
	int max=a[0][0];
	for(int i=0; i<dong; i++)
	{
		for(int j=0; j<cot; j++)
		{
			if((a[i][j])>max)
				max=a[i][j];
		}
	}
	int max2=a[][];
	for(int i=0; i< dong; i++)
	{
		for(int j=0; j<cot; j++)
		{
			if((a[i][j]) != max && max2<max && max2<a[i][j])
				max2=a[i][j]
		}
	}
	return max2;
}

Bài 4:
a)
char DoiKyTu(char s[max])
[
	int i;
	for(i=0; i<strlen(s); i++)
	{
	if(s[i]>'A'&&s[i]<='Z')
		{
		s[i]=s[i]+32;
		}
	}
	printf("%s", s);
}
b)
//Cach 1

void ChuanHoa(char *s)
{
    int i,j,n;
    n=strlen(s);
    //Xoa khoang trang o dau xau
    while(s[0]==' '){
        for(i=0;i<n;i++)
            s[i]=s[i+1];
        n=n-1;
    }
    s[0]=toupper(s[0]);
    //Xoa khoang trang o cuoi xau
    while(s[n-1]==' '){
        s[n-1]=0;
        n=n-1;
 
    }
    //Moi tu cach nhau 1 khoang trang
 
    for(i=0;i<n;i++){
        j=i;
        while( s[j]==' '){
            if(s[j+1]==' '){
            for(int k=j;k<n;k++)    s[k]=s[k+1];
            n=n-1;
            }
            else j++;
        }
    }
             s[n]=0;
    //Chu cai dau in hoa
    for(i=0;i<n;i++)
        if(s[i-1]==' ') s[i]=toupper(s[i]);
 
}

//Cach 2

void xoakhoangtrang(char *s)
{
    char *p;
    while (s[0]==' ')
        strcpy(s,s+1);
    while (s[strlen(s)-1]==' ')
        s[strlen(s)-1]='\0';
    for (int i=0; i<strlen(s); i++)
    {
        p=strstr(s,"  ");
        if (p!=NULL) strcpy(p,p+1);
    }
}
void chuanhoachuoi(char *s)
{
    xoakhoangtrang(s);
    strlwr(s);
    s[0]=toupper(s[0]);
    for (int i=1; i<strlen(s);i++)
        if (s[i-1]==' ') s[i]=toupper(s[i]);
}
c)
//in ra xau co do dai lon nhat
char TuDaiNhat(char s[]) {
			int i;
            int maxx=0, maxi=0;
            int len=strlen(s);
            if(s[0]==' ') {
                        for(i=0; i<len-1; i++) {
                                    if((s[i]==' ') && (s[i+1]!=' ')) {
                                                int j=i+1;
                                                int dem=0;
                                                while((s[j]!=' ') && (s[j]!='\0')) {
                                                            dem++;
                                                            j++;
                                                }
                                                if(dem>maxx) {
                                                            maxx=dem;
                                                            maxi=i+1;
                                                }
                                                i=j-1;
                                    }
                        }
            } else {
                        i=0;
                        int dem=0;
                        while((s[i]!=' ') && (s[i]!='\0')) {
                                    dem++;
                                    i++;
                        }
                        if(dem>maxx) {
                                    maxx=dem;
                                    maxi=0;
                        }
                        for(i=maxx-1; i<len-1; i++) {
                                    if((s[i]==' ') && (s[i+1]!=' ')) {
                                                int j=i+1;
                                                int de=0;
                                                while((s[j]!=' ') && (s[j]!='\0')) {
                                                            de++;
                                                            j++;
                                                }
                                                if(de>maxx) {
                                                            maxx=de;
                                                            maxi=i+1;
                                                }
                                                i=j-1;
                                    }
                        }
            }
            int k;
            for(k=maxi; k<(maxi+maxx); k++) {
                        printf("%c",s[k]);
            }
}
d)
void XuatMang(int a[],int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		printf("a[%d] = %c\n",i,a[i]);
	}

}
char KTChuoi(char s[],int a[])
{
    int len=strlen(s);
    int n=0;
	int i;
    for(i=0;i<len;i++)
	{
			if((s[i]>='0') && (s[i]<='9'))
		{
		a[n] = s[i];
	n++;
    int j;
    for(j=i;j<len;j++)
			{
				s[j]=s[j+1];
			}
			s[j+1]='\0';
			i--;
		}
    }
      printf("Chuoi ky tu: %s\n",s);                               
      XuatMang(a,n);

}